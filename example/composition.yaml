---
# Source: crossplane-manifests/templates/sg/composition.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xsecuritygroups.aws.crossplane.gympass.com
spec:
  compositeTypeRef:
    apiVersion: aws.crossplane.gympass.com/v1alpha1
    kind: XSecurityGroup
  mode: Pipeline
  pipeline:
  - step: ensure-security-group
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: securityGroup
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            deletionPolicy: Delete        
            forProvider:
              vpcId: some-vpc
              region: us-east-1
              revokeRulesOnDelete: true
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.name

        - type: FromCompositeFieldPath
          fromFieldPath: spec.description
          toFieldPath: spec.forProvider.description
        - type: FromCompositeFieldPath
          fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy

        - type: FromCompositeFieldPath
          fromFieldPath: spec.tags
          toFieldPath: spec.forProvider.tags
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.tags[Name]

  - step: ensure-ipv4-ingress-rules
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      delims:
        left: "[["
        right: "]]"
      inline:
        template: |
          [[- $observedXR := .observed.composite.resource ]]
          [[- $claimName := index $observedXR.metadata.labels "crossplane.io/claim-name" ]]
          [[- if $observedXR.spec.name ]]
          [[- $claimName = $observedXR.spec.name ]]
          [[- end ]]
          [[- range $i, $rule := $observedXR.spec.ingressRules ]]
          [[- range $j, $cidrBlock := $rule.cidrBlocks ]]

          [[- /*
            We want each rule and each block to be uniquely identified, then we truncate
            in case the user passes a name that's too large. We "reverse" truncate,
            taking the last 263 chars, so that we don't lose the identifiers we're
            adding to make it unique.

            Name follows <claim name>-r<index of rule>-b<index of CIDR block>-ipv4.

            A claim with two rules, with three blocks each, would result in:
              - claimName-r0-b0-ipv4
              - claimName-r0-b1-ipv4
              - claimName-r0-b2-ipv4
              - claimName-r1-b0-ipv4
              - claimName-r1-b1-ipv4
              - claimName-r1-b2-ipv4
          */ -]]

          [[- $resourceName := printf "%s-r%d-b%d-%s" $claimName $i $j "ipv4" | trunc -63 ]]
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupIngressRule
          metadata:
            name: [[ $resourceName ]]
            annotations:
              [[ setResourceNameAnnotation $resourceName ]]
          spec:
            deletionPolicy: Delete        
            forProvider:
              cidrIpv4: [[ $cidrBlock ]]
              description: [[ $rule.description ]]
              fromPort: [[ $rule.fromPort ]]
              toPort: [[ $rule.toPort ]]
              ipProtocol: [[ $rule.protocol ]]
              region: us-east-1
              securityGroupIdRef:
                name: [[ $claimName ]]
                policy:
                  resolution: Required
                  resolve: Always
              tags:
                [[- $observedXR.spec.tags | toYaml | nindent 8 ]]
          ---
          [[- end ]]
          [[- end ]]
  - step: import-resources-if-exist
    functionRef:
      name: function-aws-importer
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: function-auto-ready
